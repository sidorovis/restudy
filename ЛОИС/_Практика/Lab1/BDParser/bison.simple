From: <Saved by Windows Internet Explorer 7>
Subject: 
Date: Fri, 17 Oct 2008 16:44:47 +0300
MIME-Version: 1.0
Content-Type: text/html;
	charset="windows-1251"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.monmouth.com/~wstreett/lex-yacc/bison.simple
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.5579

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dwindows-1251">
<META content=3D"MSHTML 6.00.6000.16705" name=3DGENERATOR></HEAD>
<BODY><PRE>/* -*-C-*-  Note some compilers choke on comments on `#line' =
lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) &amp;&amp; defined (sparc)) || defined =
(__sparc__) || defined (__sparc) || defined (__sgi)
#include &lt;alloca.h&gt;
#else /* not sparc */
#if defined (MSDOS) &amp;&amp; !defined (__TURBOC__)
#include &lt;malloc.h&gt;
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include &lt;malloc.h&gt;
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus =3D 0)
#define yyclearin	(yychar =3D YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar =3D=3D YYEMPTY &amp;&amp; yylen =3D=3D 1)				\
    { yychar =3D (token), yylval =3D (value);			\
      yychar1 =3D YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&amp;yylval, &amp;yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&amp;yylval, &amp;yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&amp;yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&amp;yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG !=3D 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH =3D=3D 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif
=0C
#if __GNUC__ &gt; 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f =3D from;
  register char *t =3D to;
  register int i =3D count;

  while (i-- &gt; 0)
    *t++ =3D *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f =3D from;
  register char *t =3D to;
  register int i =3D count;

  while (i-- &gt; 0)
    *t++ =3D *f++;
}

#endif
#endif
=0C
#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be =
passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages =
enabled */
  int yychar1 =3D 0;		/*  lookahead token as an internal (translated) =
token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss =3D yyssa;		/*  refer to the stacks thru separate pointers =
*/
  YYSTYPE *yyvs =3D yyvsa;	/*  to allow yyoverflow to reallocate them =
elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls =3D yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize =3D YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG !=3D 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate =3D 0;
  yyerrstatus =3D 0;
  yynerrs =3D 0;
  yychar =3D YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp =3D yyss - 1;
  yyvsp =3D yyvs;
#ifdef YYLSP_NEEDED
  yylsp =3D yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp =3D yystate;

  if (yyssp &gt;=3D yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &amp;'s don't force the real =
ones into memory. */
      YYSTYPE *yyvs1 =3D yyvs;
      short *yyss1 =3D yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 =3D yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size =3D yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &amp;yyss1, size * sizeof (*yyssp),
		 &amp;yyvs1, size * sizeof (*yyvsp),
		 &amp;yyls1, size * sizeof (*yylsp),
		 &amp;yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &amp;yyss1, size * sizeof (*yyssp),
		 &amp;yyvs1, size * sizeof (*yyvsp),
		 &amp;yystacksize);
#endif

      yyss =3D yyss1; yyvs =3D yyvs1;
#ifdef YYLSP_NEEDED
      yyls =3D yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize &gt;=3D YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *=3D 2;
      if (yystacksize &gt; YYMAXDEPTH)
	yystacksize =3D YYMAXDEPTH;
      yyss =3D (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs =3D (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls =3D (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp =3D yyss + size - 1;
      yyvsp =3D yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp =3D yyls + size - 1;
#endif

#if YYDEBUG !=3D 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp &gt;=3D yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG !=3D 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead =
token.  */

  yyn =3D yypact[yystate];
  if (yyn =3D=3D YYFLAG)
    goto yydefault;

  /* Not known =3D&gt; get a lookahead token if don't already have one.  =
*/

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar =3D=3D YYEMPTY)
    {
#if YYDEBUG !=3D 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar =3D YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables =
with */

  if (yychar &lt;=3D 0)		/* This means end of input. */
    {
      yychar1 =3D 0;
      yychar =3D YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG !=3D 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 =3D YYTRANSLATE(yychar);

#if YYDEBUG !=3D 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn +=3D yychar1;
  if (yyn &lt; 0 || yyn &gt; YYLAST || yycheck[yyn] !=3D yychar1)
    goto yydefault;

  yyn =3D yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative =3D&gt; reduce, -yyn is rule number.
     Positive =3D&gt; shift, yyn is new state.
       New state is final state =3D&gt; don't bother to shift,
       just return success.
     0, or most negative number =3D&gt; error.  */

  if (yyn &lt; 0)
    {
      if (yyn =3D=3D YYFLAG)
	goto yyerrlab;
      yyn =3D -yyn;
      goto yyreduce;
    }
  else if (yyn =3D=3D 0)
    goto yyerrlab;

  if (yyn =3D=3D YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG !=3D 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, =
yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar !=3D YYEOF)
    yychar =3D YYEMPTY;

  *++yyvsp =3D yylval;
#ifdef YYLSP_NEEDED
  *++yylsp =3D yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error =
status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate =3D yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn =3D yydefact[yystate];
  if (yyn =3D=3D 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen =3D yyr2[yyn];
  if (yylen &gt; 0)
    yyval =3D yyvsp[1-yylen]; /* implement default value of the action =
*/

#if YYDEBUG !=3D 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i =3D yyprhs[yyn]; yyrhs[i] &gt; 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -&gt; %s\n", yytname[yyr1[yyn]]);
    }
#endif

$   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"
=0C
  yyvsp -=3D yylen;
  yyssp -=3D yylen;
#ifdef YYLSP_NEEDED
  yylsp -=3D yylen;
#endif

#if YYDEBUG !=3D 0
  if (yydebug)
    {
      short *ssp1 =3D yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 !=3D yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp =3D yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen =3D=3D 0)
    {
      yylsp-&gt;first_line =3D yylloc.first_line;
      yylsp-&gt;first_column =3D yylloc.first_column;
      yylsp-&gt;last_line =3D (yylsp-1)-&gt;last_line;
      yylsp-&gt;last_column =3D (yylsp-1)-&gt;last_column;
      yylsp-&gt;text =3D 0;
    }
  else
    {
      yylsp-&gt;last_line =3D (yylsp+yylen-1)-&gt;last_line;
      yylsp-&gt;last_column =3D (yylsp+yylen-1)-&gt;last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn =3D yyr1[yyn];

  yystate =3D yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate &gt;=3D 0 &amp;&amp; yystate &lt;=3D YYLAST &amp;&amp; =
yycheck[yystate] =3D=3D *yyssp)
    yystate =3D yytable[yystate];
  else
    yystate =3D yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn =3D yypact[yystate];

      if (yyn &gt; YYFLAG &amp;&amp; yyn &lt; YYLAST)
	{
	  int size =3D 0;
	  char *msg;
	  int x, count;

	  count =3D 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x =3D (yyn &lt; 0 ? -yyn : 0);
	       x &lt; (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] =3D=3D x)
	      size +=3D strlen(yytname[x]) + 15, count++;
	  msg =3D (char *) malloc(size + 15);
	  if (msg !=3D 0)
	    {
	      strcpy(msg, "parse error");

	      if (count &lt; 5)
		{
		  count =3D 0;
		  for (x =3D (yyn &lt; 0 ? -yyn : 0);
		       x &lt; (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] =3D=3D x)
		      {
			strcat(msg, count =3D=3D 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus =3D=3D 3)
    {
      /* if just tried and failed to reuse lookahead token after an =
error, discard it.  */

      /* return failure if at end of input */
      if (yychar =3D=3D YYEOF)
	YYABORT;

#if YYDEBUG !=3D 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, =
yytname[yychar1]);
#endif

      yychar =3D YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus =3D 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the =
error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn =3D yydefact[yystate];  /* If its default is to accept any token, =
ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error =
token */

  if (yyssp =3D=3D yyss) YYABORT;
  yyvsp--;
  yystate =3D *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG !=3D 0
  if (yydebug)
    {
      short *ssp1 =3D yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 !=3D yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn =3D yypact[yystate];
  if (yyn =3D=3D YYFLAG)
    goto yyerrdefault;

  yyn +=3D YYTERROR;
  if (yyn &lt; 0 || yyn &gt; YYLAST || yycheck[yyn] !=3D YYTERROR)
    goto yyerrdefault;

  yyn =3D yytable[yyn];
  if (yyn &lt; 0)
    {
      if (yyn =3D=3D YYFLAG)
	goto yyerrpop;
      yyn =3D -yyn;
      goto yyreduce;
    }
  else if (yyn =3D=3D 0)
    goto yyerrpop;

  if (yyn =3D=3D YYFINAL)
    YYACCEPT;

#if YYDEBUG !=3D 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp =3D yylval;
#ifdef YYLSP_NEEDED
  *++yylsp =3D yylloc;
#endif

  yystate =3D yyn;
  goto yynewstate;
}
</PRE></BODY></HTML>
